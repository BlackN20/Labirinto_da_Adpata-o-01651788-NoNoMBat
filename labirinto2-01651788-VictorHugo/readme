# 🔍 Trem Inteligente - Q-Learning Multiagente em JavaScript

Este projeto demonstra o uso de **Q-Learning** com múltiplos agentes treinando para encontrar o caminho ótimo em um labirinto. A interface gráfica é totalmente interativa, feita com `HTML5 Canvas`, e permite personalização dos parâmetros de aprendizado, visualização da Q-Table e persistência com `localStorage`.

---

## 🚀 Funcionalidades

- Treinamento multiagente com **Q-Learning**
- Interface gráfica interativa com **Canvas**
- Ajuste dos parâmetros de aprendizado: `alpha`, `gamma` e `epsilon`
- Botões para:
  - Iniciar, pausar, retomar e executar passo a passo o treinamento
  - Resetar o labirinto
  - Salvar e carregar a Q-Table
  - Visualizar a política aprendida (setas)
  - Abrir a Q-Table em uma nova aba
- Persistência da Q-Table via `localStorage`

---

## 🧠 Q-Learning

- **Estados**: coordenadas `(x, y)` no labirinto
- **Ações**: Cima (↑), Baixo (↓), Esquerda (←), Direita (→)
- **Recompensas**:
  - `-1` por movimento normal
  - `+100` para o primeiro agente que chegar ao destino
  - `+1` para agentes que chegarem depois
- **Q-Table**: Armazenada como objeto `{ estado: [q↑, q↓, q←, q→] }`

---

## 🧪 Parâmetros

Você pode ajustar os seguintes parâmetros diretamente na interface:

- **Alpha (α)**: Taxa de aprendizado
- **Gamma (γ)**: Fator de desconto
- **Epsilon (ε)**: Taxa de exploração (quanto maior, mais exploração aleatória)

---

## 🎮 Controles da Interface

| Botão | Função |
|-------|--------|
| `Iniciar Treinamento` | Começa o treinamento contínuo |
| `Pausar` | Interrompe o treinamento |
| `Retomar` | Continua o treinamento pausado |
| `Treinar Passo` | Executa um passo do treinamento |
| `Mostrar Política` | Exibe setas indicando a melhor ação aprendida em cada célula |
| `Salvar Q-Table` | Armazena a Q-Table no `localStorage` |
| `Carregar Q-Table` | Recupera a Q-Table salva |
| `Visualizar Q-Table` | Abre a Q-Table formatada em uma nova aba |
| `Resetar Aprendizado` | Apaga a Q-Table e reinicia o aprendizado |

---

## 🧱 Como Funciona o Labirinto

- Tamanho: 10x10 células
- Obstáculos são gerados aleatoriamente (20% de chance por célula)
- Ponto inicial: `(0, 0)`
- Objetivo: `(9, 9)`
- Todos os agentes começam no mesmo ponto e aprendem simultaneamente

---

## 📂 Estrutura do Projeto

trem-inteligente/
├── index.html # Interface principal
├── style.css # Estilos (se aplicável)
├── script.js # Lógica de Q-Learning e interface
└── README.md # Este documento


---

## 💾 Requisitos

- Um navegador moderno com suporte a `Canvas` e `localStorage`

---

## 🧠 Próximas Melhorias (sugestões)

- Destacar o agente vencedor visualmente
- Mostrar o caminho ótimo aprendido
- Permitir carregar labirintos personalizados
- Exportar/importar Q-Table em `.json`

---

## 🧑‍💻 Autor

Projeto desenvolvido por Victor Hugo Coriolano Borges como experimento educacional em aprendizado por reforço com JavaScript.

---

## 📘 Licença

Este projeto é de uso livre para fins educacionais.
